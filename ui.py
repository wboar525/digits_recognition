
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os

from trainer import train_all_models, model_defs, MODEL_DIR, TEST_DATA_PATH
from utils import load_test_data, load_model, evaluate_model

st.set_page_config(layout="wide")
st.title("üß† –û–±—É—á–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ —Ü–∏—Ñ—Ä")

model_names = list(model_defs.keys())

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
section = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", [
    "üèóÔ∏è –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏",
    "üìä –û—Ü–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏",
    "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–∫—É",
    "üîé –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É"
])

trained_models = [name for name in model_names if os.path.exists(os.path.join(MODEL_DIR, f"{name}.joblib"))]
if section != "üèóÔ∏è –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏" and not trained_models:
    st.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
    st.stop()

if section == "üèóÔ∏è –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏":
    st.subheader("üìö –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
    if st.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"):
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π..."):
            df = train_all_models()
        st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        st.dataframe(df)

elif section == "üìä –û—Ü–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏":
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –æ—Ç—á—ë—Ç—ã")
    X_test, y_test = load_test_data()
    if X_test is None:
        st.error("‚ùå test_data.npz –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        st.stop()

    mode = st.radio("–†–µ–∂–∏–º:", ["–û–¥–Ω–∞ –º–æ–¥–µ–ª—å", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö"])
    if mode == "–û–¥–Ω–∞ –º–æ–¥–µ–ª—å":
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", model_names)
        model = load_model(MODEL_DIR, selected_model)
        if model is None:
            st.error("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            st.stop()
        acc, report, cm = evaluate_model(model, X_test, y_test)
        st.metric("Accuracy", f"{acc:.4f}")
        st.dataframe(pd.DataFrame(report).T.style.format(precision=3))
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", ax=ax)
        ax.set_title(f"Confusion Matrix - {selected_model}")
        st.pyplot(fig)
    else:
        results = []
        for name in model_names:
            model = load_model(MODEL_DIR, name)
            if model:
                acc, _, _ = evaluate_model(model, X_test, y_test)
                results.append({"Model": name.replace("_", " ").title(), "Accuracy": round(acc, 4)})
        df = pd.DataFrame(results).sort_values(by="Accuracy", ascending=False)
        st.dataframe(df.set_index("Model").style.format(precision=4))

elif section == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–∫—É":
    st.subheader("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–∏—Ñ—Ä–µ")
    X_test, y_test = load_test_data()
    if X_test is None:
        st.error("‚ùå test_data.npz –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        st.stop()

    selected_digit = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É:", sorted(np.unique(y_test)))
    indices = np.where(y_test == selected_digit)[0]

    if len(indices) == 0:
        st.warning("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —ç—Ç–æ–π –º–µ—Ç–∫–æ–π.")
        st.stop()

    cols = st.columns(len(model_names))
    for i, name in enumerate(model_names):
        model = load_model(MODEL_DIR, name)
        if model:
            preds = model.predict(X_test[indices])
            acc = (preds == y_test[indices]).mean()
            with cols[i]:
                st.markdown(f"**{name.replace('_', ' ').title()}**")
                st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{acc:.4f}")

    st.subheader("üñº –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    show = min(12, len(indices))
    img_cols = st.columns(6)
    for idx, img_index in enumerate(indices[:show]):
        image = X_test[img_index].reshape(8, 8)
        fig, ax = plt.subplots()
        ax.imshow(image, cmap="gray")
        ax.axis("off")
        preds = []
        for name in model_names:
            model = load_model(MODEL_DIR, name)
            if model:
                pred = model.predict([X_test[img_index]])[0]
                preds.append(f"{name.split('_')[0]}: {pred}")
        with img_cols[idx % 6]:
            st.pyplot(fig)
            st.caption(f"True: {y_test[img_index]}\n" + "\n".join(preds))



elif section == "üîé –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É":
    st.subheader("üîé –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ")
    X_test, y_test = load_test_data()
    if X_test is None:
        st.error("‚ùå test_data.npz –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        st.stop()

    if "idx" not in st.session_state:
        st.session_state.idx = 0

    col1, col2 = st.columns([4, 1])
    with col1:
        st.session_state.idx = st.slider(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–º–µ—Ä–∞",
            min_value=0, max_value=len(X_test)-1,
            value=st.session_state.idx, step=1
        )
    with col2:
        if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π"):
            st.session_state.idx = (st.session_state.idx + 1) % len(X_test)
            st.rerun()

    image = X_test[st.session_state.idx].reshape(8, 8)
    fig, ax = plt.subplots()
    ax.imshow(image, cmap="gray")
    ax.axis("off")
    st.pyplot(fig)
    st.caption(f"–ò—Å—Ç–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞: {y_test[st.session_state.idx]}")

    st.write("### –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π:")
    for name in model_names:
        model = load_model(MODEL_DIR, name)
        if model:
            pred = model.predict([X_test[st.session_state.idx]])[0]
            st.write(f"**{name.replace('_', ' ').title()}** ‚Üí –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: **{pred}**")
